#!/bin/sh
# common file for mfe-matrix scripts
# this sets environment variables used by other scripts in this ecosystem
# please remember to 'export' variables

umask 000
export PATTERNS="=======|<<<<<<<|>>>>>>>"
export PCTL=80
export LC_COLLATE=C 

BailOut() {
  [ -n "$1" ] && echo "Error: $*" >&2
  [[ -n $TMP ]] && rm -rf $TMP 
  exit 255
}

gitStage() {
  echo "$FUNCNAME"
  git stash -q
  git pull -q --rebase 
  git stash pop -q >/dev/null 2>&1
{ set +x; } 2>/dev/null
}

gitCommit() {
  f=$1
  echo "$FUNCNAME $(basename $f)"
  cd $(dirname $f)
  egrep -iv "$PATTERNS" $f > $f.new;mv $f.new $f
#set -x
  git stash -q
  git pull -q --rebase >/dev/null 2>&1
  git add $f >/dev/null 2>&1
  git stash pop -q >/dev/null 2>&1
  git commit -q -m "$FUNCNAME $DATE" $f  2>/dev/null
  git push -q --force >/dev/null 2>&1
{ set +x; } 2>/dev/null
}

CSV() { echo "$*" >> $APP_DATA.new; }
HTML() { echo "$*" >> $OUTFILE; }

getURIendpoint() {
  BRAND=WS
  ENVIRO=$1
  SETTING=$2
}

getManifestData() {
  env=$1
  app=$2
  name=$3
  echo "  >>> $FUNCNAME $env $app $name" >&2

#set -x
  ver=$(get-manifest -k app_version -e $env -s $name)
  if [[ -n $ver ]]
  then
#set -x
    org=
    bch=
    DATA="$DATE,$env,$app,$name,,$ver" 
#{ set +x; } 2>/dev/null
  else
#set -x
    mft=$(get-manifest -k app_branch -e $env -s $name)
    org=$(awk -F/ '{ print $1 }' <<< $mft)
    bch=$(awk -F/ '{ print $NF }' <<< $mft)
    DATA="$DATE,$env,$app,$name,$org/$bch,$ver" 
#{ set +x; } 2>/dev/null
  fi
  echo "    $DATA"
  echo "$DATA" >> $APP_DATA_MANIFEST
}

getOverrideValue() {
  ENVIRO=$1
  SETTING=$2
  VALUE=

  echo "  >>> $FUNCNAME $ENVIRO $SETTING" >&2
  pe=$ENVIRO
  [[ $pe = "qa" ]] && pe=qa1

  for BRAND in $(getbrandlist -a $ENVIRO)
  do
    POM="$DEVOPS/$FRONTEND/$BRAND/$pe/pom.xml"
    SCHEMA=$(getschema $BRAND $ENVIRO | awk -F: '{ print $1 }')
    [[ -z $SCHEMA ]] && return
#set -x
    SERVICE=$(svn cat $POM 2>/dev/null|egrep -i "<frontend.datasource.ecomDB.url>" \
      | awk -F '[<>]' '{ print $3 }' | tr "A-Z" "a-z" | awk -F [/:] '{ print $NF }')
{ set +x; } 2>/dev/null 
    [[ $SERVICE =~ webprf ]] && SERVICE="webprf"
    [[ -z $SERVICE ]] && return

    OVERRIDE_URL="$DEVOPS/$PROPERTIES/$SERVICE/$SCHEMA/$BRAND/override/override.properties"
  done
}

validateGit() {
  URL=$1
  CONFIG=$2
  repo=$(basename $URL)
  org=$(echo $URL | awk -F/ '{ print $(NF-1) }')

  cd $TMP
  rm -rf $repo
  [[ -n $DEBUG ]] && echo "git@github.wsgc.com:$org/$repo.git"
  git clone -q --depth 1 "git@github.wsgc.com:$org/$repo.git" >/dev/null 2>&1
  [[ $? -ne 0 ]] && URL=
  echo $URL
}

validateJenkins() {
  URL=$1

#set -x
  curl --user "$JENKINS_LOGIN" -fsqk "$URL" >/dev/null 2>/dev/null 
#{ ret=$?; set +x; } 2>/dev/null
  [[ $ret -ne 0 ]] && return
  echo "$URL"
}

getVersionRunDeck() {
  appVersion=
  tag=
  APPNAME=$1
  echo "  >>> $FUNCNAME $APPNAME" >&2

  #JSON=$(ls -1t $TMP/tools/mfe/mfe-interim-config-build/*/selected_${APPNAME}_branch.json 2>/dev/null | head -1)
  #[[ -z $JSON ]] && return
  #xBRANCH=$(cat $JSON | awk -F\'  '{ print $2 }')
  #echo "Branch: $xBRANCH" 

  [[ $env = prod ]] && tag=prd
  [[ $env =~ pre ]] && tag=preprd
  MARKET=$(getmarket $env | tr '[:upper:]' '[:lower:]')
  [[ $MARKET = us ]] && MARKET=
  [[ $MARKET = can ]] && MARKET="-ca"
  RD_JOB=$(ls -1t $(grep -ilr "mfe-config-build-all" $TMP/rundeck/deploy/prd/${tag}* | grep "/mfe-brand-config$MARKET/") | head -1)
  [[ -z $RD_JOB ]] && return

  BRANCH=$(grep -i "name:.*_${APPNAME}_Branch" $RD_JOB)
  [[ -z $BRANCH ]] && return
  { set +x; } 2>/dev/null
}

getVersionHelm() {
  appVersion=
  helmVersion=
  APPNAME=$1
  HELM=$2

  echo "  >>> $FUNCNAME $APPNAME $HELM" >&2
  [[ -n $static_url ]] && src_url=$static_url || src_url=$HELM

  helm_org=$(echo $HELM | awk -F/ '{ print $1 }')
  helm_repo=$(echo $HELM | awk -F/ '{ print $2 }')
  helm_branch=$(echo $HELM | awk -F/ '{ print $3 }')
  [[ -z $helm_branch ]] && helm_branch=release
  helm_git=git@github.wsgc.com:$helm_org/$helm_repo.git
  helm_dir=$TMP/$APPNAME-$helm_org:$helm_branch

  mkdir -p $(dirname $helm_dir)
  if [[ ! -e $helm_dir/.git ]]
  then  
    git clone -q --depth 1 $helm_git -b $helm_branch $helm_dir >/dev/null 2>&1
    { ret=$?; set +x; } 2>/dev/null
    [[ $ret -ne 0 ]] && { HELM=;echo "    *** Unable to clone $helm_git $helm_branch (helm)"; return; }
  fi

  # quandary: should we really use the 'parent' version of this?
  # eg if there isn't an environment-specific value, do we take the value from the parent values.yaml?
#set -x
  [[ -e $helm_dir/config/$env/values.yaml ]] && appVersion=$(yq eval '.deployment.image.tag' $helm_dir/config/$env/values.yaml | sed -es/null//g)
  [[ -z $appVersion ]] && appVersion=$(yq eval '.deployment.image.tag' $helm_dir/config/values.yaml 2>/dev/null | sed -es/null//g)
{ set +x; } 2>/dev/null

  [[ -e $helm_dir/project.yaml ]] && helmVersion=$(yq eval '.version' $helm_dir/project.yaml 2>/dev/null | sed -es/null//g)
  if [[ -n $helmVersion ]]
  then
    src_url=https://github.wsgc.com/$helm_org/$helm_repo/tree/$helm_branch
    #echo "        $env $APPNAME helm:$helmVersion" >&2
    echo "$DATE,$env,$app,$APPNAME,$helmVersion,$src_url" >> ${APP_DATA_CHART}
  fi

  if [[ -n $appVersion ]] 
  then
echo "      $HELM appVersion:$appVersion"
    #src_url=$(sed -es%/config.xml%%g <<< $src_url)
    src_url=https://github.wsgc.com/$helm_org/$helm_repo/tree/$helm_branch
    echo "        $env $APPNAME $appVersion $src_url" >&2
    echo "$DATE,$env,$app,$APPNAME,$appVersion,$src_url" >> ${APP_DATA_HELM}
  fi 
}

getVersionAppRepo() {
  src_file=
  appVersion=
  APPNAME=$1
  DEPLOY=$2
  echo "  >>> $FUNCNAME $APPNAME $DEPLOY" >&2

  repo_org=$(echo $DEPLOY | awk -F/ '{ print $1 }')
  repo_branch=$(echo $DEPLOY | awk -F/ '{ print $2 }')
  repo_git=git@github.wsgc.com:$repo_org/$APPNAME
  repo_dir=$TMP/$APPNAME-$repo_org:$repo_branch

  mkdir -p $(dirname $repo_dir)
  if [[ ! -e $repo_dir/.git ]]
  then 
    git clone -q --depth 1 $repo_git -b $repo_branch $repo_dir >/dev/null 2>&1
    { ret=$?; set +x; } 2>/dev/null
    [[ $ret -ne 0 ]] && { echo "    *** Unable to clone $repo_git (repo)"; return; }
  fi

  src_url=https://github.wsgc.com/$repo_org/$APPNAME/tree/$repo_branch
  if [[ $APPNAME =~ ecom-svc ]]
  then
    gv=$(echo "$repo_branch" | sed -es/release-//g -es/\.x$//g -es/release//g)
    appVersion=$(getversion $APPNAME $gv)
    [[ -n $appVersion ]] && { src_file=getversion; return; }
  fi

  # this needs to be refactored to use jq/yq but I need something quick and dirty for a Saturday afternoon
  if [[ -e $repo_dir/package.json ]]
  then
    appVersion=$(grep -i -A+2 "name.*:.*$APP_NAME" $repo_dir/package.json | grep "version.*:" | awk '{ print $NF }' | sed -es/\"//g -es/,//g)
    src_file=package.json
  fi

  if [[ -e $repo_dir/pom.xml ]]
  then
    appVersion=$(grep -A+5 $APPNAME $repo_dir/pom.xml | grep -i version | head -1 | awk -F '[<>]' '{ print $3 }')
    src_file=pom.xml
  fi
}

getSvcSummary() {
  E=$1
  N=$2
  A=$3
  echo "  >>> $FUNCNAME $E $N $A" >&2

  ep=$(grep ",$E,$N,$A," ${APP_DATA_ENDPOINTS} | sort -u | tail -1 | awk -F, '{ print $5 }' | awk -F/ '{ print $3 }')
  [[ -z $ep ]] && return

  svcSummary=$(xmlstarlet sel -t -v "$APP_PROP[appName='$N']/svcSummary" $CONFIG | tr -d '[:space:]')
  [[ -z $svcSummary ]] && svcSummary=/summary

  for BRAND in $(getbrandlist -a $E)
  do
    URL=$(echo "https://$ep$svcSummary" | sed -es/WS/$BRAND/g)
    svcVersion=$(curl $TIMEOUT -fsqk $URL | jq '.build .version' | sed -es/\"//g -es/ci_eCommerce-//g -es/-SNAPSHOT//g)
    [[ -n $svcVersion ]] && echo "$DATE,$E,$N,$A,$svcVersion,$BRAND,$URL" >> ${APP_DATA_SUMMARY}
  done
}

export ORG=Mead
export REPO=git@github.wsgc.com:eCommerce-$ORG/mfe-matrix.git

# XML props
export CONFIG=app-config.xml
export APP_PROP="project/properties/appDefinitions/appDefinition"
export FLOW_PROP="/flow-definition/properties/EnvInjectJobProperty/info/propertiesContent"
export STRING_PROP="/project/properties/hudson.model.ParametersDefinitionProperty/parameterDefinitions/hudson.model.StringParameterDefinition"

# Confluence constants
BASEDIR="/apps/scripts/env_summary"
CCLIDIR="$BASEDIR/atlassian-cli-3.2.0"

# this is the Confluence space in which the page will reside
export DOC_SPACE="ES"

# Jenkins props
export JENKINS_USER="svcaecjnk"
export JENKINS_CREDS=~/.credentials.d/jenkins-$JENKINS_USER-user
[ -e $JENKINS_CREDS ] || BailOut "Auth file ($JENKINS_CREDS) not found"
export JENKINS_USER=$( (source "$JENKINS_CREDS"; echo "$USERNAME") )
export JENKINS_PASS=$( (source "$JENKINS_CREDS"; echo "$PASSWORD") )
export JENKINS_LOGIN="$JENKINS_USER:$JENKINS_PASS"
export JENKINS_JOBS=git@github.wsgc.com:eCommerce-Mead/jenkins-jobs.git
export JENKINS=$(which jenkins-jnlp 2>/dev/null)
export JENKINS_URL="https://ecombuild.wsgc.com/jenkins"
export JENKINS_TEMPLATES=git@github.wsgc.com:eCommerce-Mead/jenkins-templates.git
export JENKINS_K8S=$JENKINS_URL/job/k8s-deployers/job/ecom/job
export DP_LOGIN="pkqaenv:Ca8tWh33l"
export RUNDECK_JOBS=git@github.wsgc.com:eCommerce-Mead/rundeck-jobs.git
export RUNDECK_TOOLS=git@github.wsgc.com:eCommerce-Mead/rundeck-tools.git
export DP_CURL="curl --fail $TIMEOUT $USER_AGENT -u '$DP_LOGIN' -sqk -H 'Cache-Control: no-cache'"

export HEADER="<!-- $(date) -->
<p>Related pages</p>
<ul>
<li><a href='https://confluence.wsgc.com/display/TAH/Manifest+User+guide'>Manifest User Guide</a></li>
<li><a href='https://ecombuild.wsgc.com/jenkins/job/update-mfe-config/'>Jenkins Update MFE Config</a></li>
<li><a href='https://ecombuild.wsgc.com/jenkins/job/k8s-deployers/job/ecom/job/delivery-gateway/'>Jenkins ADG</a></li>
<li><a href='https://ecombuild.wsgc.com/jenkins/job/generate-mfe-matrix-data/'>Generate MFE Matrix Data</a></li>
<li><a href='https://confluence.wsgc.com/pages/viewpage.action?pageId=391962204'>MFE App/Service Index</a></li> 
<li><a href='https://confluence.wsgc.com/display/ES/MFE+Deployment+Matrix'>MFE Deployment Matrix</a></li>
<li><a href='https://confluence.wsgc.com/display/ES/MFE+Config+Build+Status'>MFE Config Build Status</a></li>
</ul>
"
#<li><a href='https://ecombuild.wsgc.com/jenkins/job/eCommerce-Tahoe/job/etcd-syncappconfig-k8s-package/job/all-nonprod-session/'>Jenkins all-nonprod-session</a></li>

# color codes for other stuff
COLOR_STALE='#E6E6FA'
COLOR_DEAD='#F5D6EB'
COLOR_ALT='#ECF0F1'
COLOR_HEADER='#E0E0E0'
#COLOR_INVALID='#ffe6f9'
COLOR_STATIC='#ff0000'

TEXT_SUCC="#009900"
TEXT_FAIL="#cc0000"

MFE_CONFIG_FAIL="#ff9999"

DEPLOYER_FAIL="<ac:emoticon ac:name='minus'/>"
DEPLOYER_NULL="<ac:emoticon ac:name='question'/>"
#DEPLOYER_ABRT="<ac:emoticon ac:name='information'/>"
DEPLOYER_ABRT="<ac:emoticon ac:name='warning'/>"

DEPLOYER_FAIL_COUNT=0
DEPLOYER_NULL_COUNT=0
DEPLOYER_ABRT_COUNT=0

# date older than this is considered stale
DAYS_STALE=5
DAYS_DEAD=7

# color codes for data sources
SOURCE_SUMMARY='#336600'
SOURCE_MANIFEST='#009933'
SOURCE_TAG='#0099ff'
SOURCE_HELM='#9966ff'
SOURCE_REPO='#cc0099'

SOURCES="<!-- sources -->
<table border='1'>
<tr><th colspan='2' style='text-align:center'><font size='-1'>Data Source Key</font></th></tr>

<tr>
<th style='text-align:center'><font size='-1'>Source</font></th>
<th style='text-align:center'><font size='-1'>Confidence Level</font></th>
</tr>

<tr>
<td><font color='$SOURCE_SUMMARY' size='-1' style='text-align:right'>Parsed from app-specific summary endpoint</font></td>
<td><font size='-1'>Highest confidence, value obtained from running instance</font></td>
</tr>

<tr>
<td><font color='$SOURCE_MANIFEST' size='-1' style='text-align:right'>Parsed from environment manifest</font></td>
<td><font size='-1'>Very high confidence</font></td>
</tr>

<tr>
<td><font color='$SOURCE_TAG' size='-1' style='text-align:right'>Parsed from release tag in static deployer</font></td>
<td><font size='-1'>High confidence, depends on deployment status</font></td>
</tr>

<tr>
<td><font color='$SOURCE_HELM' size='-1' style='text-align:right'>Parsed from Helm config</font></td>
<td><font size='-1'>Good confidence, depends on deployment status</font></td>
</tr>

<tr>
<td><font color='$SOURCE_REPO' size='-1' style='text-align:right'>Parsed from app code repo</font></td>
<td><font size='-1'>Might need validation</font></td>
</tr>

<tr>
<td bgcolor='$COLOR_STALE' style='text-align:right'><font size='-1'>Stale data (@COUNT_STALE@)</font></td>
<td><font size='-1'>Data is over $DAYS_STALE days old</font></td>
</tr>

<tr>
<td bgcolor='$MFE_CONFIG_FAIL' style='text-align:right'><font size='-1'>MFE config job failed (@COUNT_MFE_FAIL@)</font></td>
<td><font size='-1'></font></td>
</tr>

<tr>
<td bgcolor='$COLOR_INVALID' style='text-align:right'><font size='-1'>Invalid Endpoint (@COUNT_INVALID@)</font></td>
<td><font size='-1'>Endpoint was not reachable</font></td>
</tr>

<tr>
<td style='text-align:right'><font size='-1'>$DEPLOYER_FAIL</font></td>
<td><font size='-1'>Static deployer status: failed (@DEPLOYER_FAIL_COUNT@)</font></td>
</tr>

<tr>
<td style='text-align:right'><font size='-1'>$DEPLOYER_NULL</font></td>
<td><font size='-1'>Static deployer status: indeterminate (@DEPLOYER_NULL_COUNT@)</font></td>
</tr>

<tr>
<td style='text-align:right'><font size='-1'>$DEPLOYER_ABRT</font></td>
<td><font size='-1'>Static deployer status: aborted (@DEPLOYER_ABRT_COUNT@)</font></td>
</tr>

<!--
<tr>
<td bgcolor='$COLOR_DEAD'><font size='-1'>Dead data</font></td>
<td><font size='-1'>Data is over $DAYS_DEAD days old</font></td>
</tr>
-->
</table>"

SUPERS="
<font size='-1'>
<br><sup><b>1</b></sup> <i>Specific version is defined in static deployer, which overrides helm chart</i></br>
<br><sup><b>2</b></sup> <i>Branch is defined in static deployer, which overrides helm chart</i></br>
<br><sup><b>3</b></sup> <i>Static deployer is using the base <code>release</code> branch when it should be using a <code>release-x.y.z</code> branch (this violates policy for UAT environments)</i></br>
<br><sup><b>4</b></sup> <i>Static deployer is not using a branch from eCommerce-Bedrock (this violates policy for UAT environments)</i></br>
<br><sup><b>5</b></sup> <i>Static deployer specifies neither a branch or a tag (this violates policy for UAT environments)</i></br>
</font>
"
#<br><sup><b>§</b></sup> <i>Manifest-enabled</i></br>

FOOTER="<p>Configs located at <a href='https://github.wsgc.com/eCommerce-Mead/mfe-matrix'>mfe-matrix</a></p>
Data generated by <a href='https://ecombuild.wsgc.com/jenkins/job/generate-mfe-matrix-data/'>generate-mfe-matrix-data</a>"

export DAYS=1
export OLD=$(expr $(date --date "-$DAYS days" '+%Y%m%d%H%M%S') - 4000)
export DEVOPS=https://repos.wsgc.com/svn/devops
export PROPERTIES=packaging/wsgc-appsettings-configuration/trunk/appsetting-properties/schema-site
export FRONTEND=application/frontend-2.1/qa/config/app/trunk

export TIMEOUT="--connect-timeout 5 --max-time 15"
export USER_AGENT="--user-agent MFEMatrix"

export DATE=$(date +'%Y-%m-%d %H:%M')
export TODAY=$(date +'%Y-%m-%d')

# datafiles
export BUILD_STATS=$TMP/repo/data/mfe-build-stats.csv
export APP_DATA_MANIFEST=$TMP/repo/data/app-data_from-manifest.csv
export APP_DATA_DEPLOYERS=$TMP/repo/data/app-data_deployers.csv
export APP_DATA_ENDPOINTS=$TMP/repo/data/app-data_endpoints.csv
export APP_DATA_SUMMARY=$TMP/repo/data/app-data_from-summary-page.csv
export APP_DATA_CONFIG=$TMP/repo/data/app-data_from-config-job.csv
export APP_DATA_RUNDECK=$TMP/repo/data/app-data_from-rundeck-job.csv
export APP_DATA_HELM=$TMP/repo/data/app-data_from-helm.csv
export APP_DATA_REPO=$TMP/repo/data/app-data_from-repo.csv
export APP_DATA_TAG=$TMP/repo/data/app-data_from-tag.csv
export APP_DATA_ENV=$TMP/repo/data/app-data_by-env.csv
export APP_DATA_CHART=$TMP/repo/data/app-data_from-chart.csv
export APP_DATA_LIST="$APP_DATA_SUMMARY $APP_DATA_CONFIG $APP_DATA_ENV $APP_DATA_REPO $APP_DATA_HELM $APP_DATA_CHART $APP_DATA_TAG $APP_DATA_DEPLOYERS"

