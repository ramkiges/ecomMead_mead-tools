#!/bin/bash
# TODO: maybe update tandalone-feedgen/69-config.properties:feed_generator.catalog_image_url_base ?
# https://jira.wsgc.com/browse/MEAD-23872
# ecmImagesUrl in delivery-gateway-k8s-package
# another place to maybe edit
# https://github.wsgc.com/eCommerce-DevOps/oss-feedgen-service-ca-qa-config/blob/master/src/main/resources/standalone-feedgen/79-config.properties#L39
# https://github.wsgc.com/eCommerce-Kubernetes-Bedrock/ecom-svc-content-helm-config/blob/release/config/regression/values.yaml#L67

# for domestic GMTP
#      <frontend.contentImageBase>http://img-qa-rk1v.wsgc.com/${frontend.brand}imgs/ecm-non-prod-assets/images/dp/</frontend.contentImageBase>
#      <frontend.secureContentImageBase>https://img-qa-rk1v.wsgc.com/${frontend.brand}imgs/ecm-non-prod-assets/images/dp/</frontend.secureContentImageBase>
#       <frontend.docImageBase>http://qark-images.${frontend.brand}imgs.com/${frontend.brand}imgs/qa/images/rgs/</frontend.docImageBase>
#       <frontend.secureDocImageBase>https://qark-images.${frontend.brand}imgs.com/${frontend.brand}imgs/qa/images/rgs/</frontend.secureDocImageBase>
#<frontend.scriptSubPath>${frontend.brand}imgs/qa/images/rgs/


PATH=/apps/mead-tools:/apps:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:~/bin:/wsgc/bin
REMOTE_IMGHOST="img-qa-rk1v.wsgc.com"
IMGHOST="img-qa-rk1v.wsgc.com"
IMGPROXY="img-qa-rk1v.wsgc.com"
DEVOPS=https://repos.wsgc.com/svn/devops
PROPERTIES=packaging/wsgc-appsettings-configuration/trunk/appsetting-properties/schema-site
FRONTEND=application/frontend-2.1/qa/config/app/trunk
WSGC=/tmp/$(basename $0)-work-$$
JENKINS=$(which jenkins-jnlp 2>/dev/null)

if [[ $LOGNAME = jenkins ]] 
then
  SSH_USER=builder
  SSH_KEY=$HOME/.ssh/id_rsa_svcagitci
else
  SSH_USER=$LOGNAME
  SSH_KEY=$HOME/.ssh/id_rsa
fi

#
ADG_REPO=git@github.wsgc.com:eCommerce-DevOps/delivery-gateway-helm-config.git

# Jira icons
ICON_FAIL=" (x) "
ICON_SUCC=" (/) "
ICON_WARN=" (!) "
ICON_INFO=" (i) "

BRAND=$(echo "$1" | tr '[:upper:]' '[:lower:]')
BRAND_UC=$(echo "$1" | tr '[:lower:]' '[:upper:]')
ENVIRO=$(echo "$2" | tr '[:upper:]' '[:lower:]')
SVN_ENV=$ENVIRO
SRC=$3

BailOut() {
  { set +x; } 2>/dev/null
  [[ -n $1 ]] && echo "$(basename $0): $*" 
	
  rm -rf $WSGC
	exit 1
}

Notation() { echo "### [$(basename $0)] $* "; }

UpdateADG() {
  property=$1
  value=$2
  echo "$(basename $0):$FUNCNAME $property"
  [[ -z $property ]] && BailOut "$FUNCNAME: 'property' is blank"
  [[ -z $value ]] && BailOut "$FUNCNAME: 'value' is blank"

  # massage the value to be acceptable to ADG
  img_path=$value
  img_path=$(sed -es%http.*//%%g <<< $img_path)
  img_path=$(sed -es%[a-z][a-z]imgs.com%${BRAND}imgs.com%gi <<< $img_path)
  img_path=$(sed -es%[a-z][a-z]imgs%${BRAND}imgs%gi <<< $img_path)
  img_path=$(sed -es%[a-z][a-z]-imgs%${BRAND}-imgs%gi <<< $img_path)
  img_path=$(sed -es%/[a-z][a-z]-images/%/${BRAND}-images/%gi <<< $img_path)
  img_path=$(sed -es%"\${frontend.brand}imgs.com"%"${BRAND}imgs.com"%gi <<< $img_path)
  img_path=$(sed -es%"\${frontend.brand}imgs"%"${BRAND}imgs"%gi <<< $img_path)
  img_path=$(sed -es%"\${frontend.brand}-images"%"${BRAND}-images"%gi <<< $img_path)
  img_path=$(sed -es%"\${frontend.brand}"%"${BRAND}"%gi <<< $img_path)
  img_path=$(sed -es%"\${frontend.cmx}"%"${CMX}"%gi <<< $img_path)
  img_path=$(sed -es%"\${frontend.wcm}"%"${WCM}"%gi <<< $img_path)
  img_path=$(sed -es://:/:gi <<< $img_path)
  img_path=$(sed -es:/*$:: <<< $img_path)

  exp="(.environments.[] | select(has(\"name\")) | select(.name == \"$ENVIRO\")).brands.${BRAND_UC}.$property=\"$img_path/\""
  yq eval -i "$exp" $VALUES

  domain=$(getdomain $BRAND $ENVIRO)
  exp="(.environments.[] | select(has(\"name\")) | select(.name == \"$ENVIRO\")).brands.${BRAND_UC}.conceptUrl=\"$domain\""
  yq eval -i "$exp" $VALUES

  prefix=$(get-akamai $BRAND $ENVIRO | sed -es%https://%%g -es/"\.$domain"//g)
  exp="(.environments.[] | select(has(\"name\")) | select(.name == \"$ENVIRO\")).urlPrefix=\"$prefix\""
  yq eval -i "$exp" $VALUES
}

[[ -z $ENVIRO ]] && BailOut

# check out the frontend and properties repos
checkOut() {
	umask 000
	rm -rf $WSGC >/dev/null 2>&1
	mkdir -p $WSGC 
	cd $WSGC || BailOut "Could not cd to $WSGC"

	/bin/echo -ne "Checkout frontend... "
	mkdir -p $WSGC/$(dirname $FRONTEND)
	cd $WSGC/$(dirname $FRONTEND) 
	svn -q co $DEVOPS/$FRONTEND $(basename $FRONTEND) || BailOut "$FUNCNAME:Unable to clone $FRONTEND"
	svn -q up

	echo "Done"

  rm -rf $WSGC/adg || BailOut "Can't cleanup prior execution"
  ADG_ENV=$(get-adg-env $BRANDH $ENVIRO 2>/dev/null)
  [[ -z $ADG_ENV ]] && BailOut "ADG_ENV is empty"

  ADG_BRANCH=$(get-adg-branch $BRAND $ENVIRO)
  [[ -z $ADG_BRANCH ]] && BailOut "Why is ADG_BRANCH empty?"

  /bin/echo -ne "Checkout ADG $ADG_BRANCH/$ADG_ENV ... "
  git clone -b $ADG_BRANCH -q $ADG_REPO $WSGC/adg || BailOut "$FUNCNAME:Unable to clone $ADG_REPO/$ADG_BRANCH"
  VALUES=$WSGC/adg/config/$ADG_ENV/values.yaml
  [[ -e $VALUES ]] || BailOut "Can't find $VALUES"
  echo " done"
}

showProps() {
    [[ -n $1 ]] && echo "$*"

    for prop in securecatimagebase securedocimagebase securecontentimagebase secureappbase scriptSubPath remoteProxyImageBase remoteContentArchiveUrlBases urlMappings ecmPreviewUrl ecmPreviewMode
    do
        key=$(grep -i "${prop}" $POM | head -1 | awk -F '[<>]' '{ print $2 }')
        [[ -n $key ]] && echo "$key: $(propget -f $POM -p $key 2>/dev/null) " || echo "No prop found matching '$prop'"
    done
}

[[ $BRAND =~ admin ]] && BailOut "Admin not supported"
[[ $BRAND =~ corp ]] && BailOut "Corp not supported"

for app in geturls yq get-host
do
  which $app > /dev/null 2>&1 || BailOut "Can't find $app"
done

HOST=$(get-host $BRAND $ENVIRO 2>/dev/null | awk -F\. '{ print $1 }')
[[ -z $HOST ]] && echo "Hostname is blank for $BRAND $ENVIRO"

TICKET=$(tr '[:lower:]' '[:upper:]' <<< $TICKET)
COMMENT=$TICKET
[[ -z $TICKET ]] && COMMENT="DEVOPS"

INSTALLATION=$(get-installation $BRAND $ENVIRO)

case $ENVIRO in
    uat | uat1 ) 
        SVN_ENV=uat1
        WWW="www.uat.\${frontend.domain}"
    ;;

    int|int1 ) 
        WWW="integration.\${frontend.domain}"
    ;;

    int2|integration2 )
        SVN_ENV=int2           
        WWW="integration2.\${frontend.domain}"
    ;;

    rgs1 )
        SVN_ENV=rgs1           
        WWW="regression.\${frontend.domain}"
    ;;

    rgs2 )
        SVN_ENV=rgs2           
        WWW="regression2.\${frontend.domain}"
    ;;

    cargs1 )
        SVN_ENV=cargs1           
        WWW="regression.\${frontend.domain}"
    ;;

    cauat1 )
        SVN_ENV=cauat1
        WWW="www.uat.\${frontend.domain}"
    ;;

    caqa* | cauat* | cabpv | caperf | caint* )
        SVN_ENV=$ENVIRO
        ENV=$(echo $ENVIRO | sed -es/"^ca"//g)
        WWW="www.${ENV}.\${frontend.domain}"
    ;;

    * )
        WWW="www.$ENVIRO.\${frontend.domain}"
    ;;
esac

IMGHOST_EXT="qark-images.\${frontend.brand}imgs.com"

# check out the frontend config repos
checkOut

# grab the market
MARKET_DISPLAY=$(get-market $BRAND $ENVIRO | tr '[:lower:]' '[:upper:]')
MARKET=$MARKET_DISPLAY
# default US is null
[[ $MARKET =~ US ]] && MARKET=
MARKET_LC=$(tr '[:upper:]' '[:lower:]' <<< $MARKET)

DEPLOYMENTS="https://repos.wsgc.com/svn/deployments/content/trunk/deploy/properties/${SVN_ENV}/${BRAND}${MARKET_LC}.properties"
svn cat $DEPLOYMENTS > /dev/null 2>&1 || BailOut "Deployment properties file missing $DEPLOYMENTS"
URI_BGB=$(svn cat $DEPLOYMENTS | grep "^bgburi=" | awk -F= '{ print $NF }')
URI_BSYS=$(svn cat $DEPLOYMENTS | grep "^bsuri=" | awk -F= '{ print $NF }')

[[ -z $URI_BGB ]] && URI_BGB=$(svn cat $(dirname $(dirname $DEPLOYMENTS))/deploy.properties | grep "^bgburi=" | awk -F= '{ print $NF }')
[[ -z $URI_BSYS ]] && URI_BSYS=$(svn cat $(dirname $(dirname $DEPLOYMENTS))/deploy.properties | grep "^bsuri=" | awk -F= '{ print $NF }')

SVN_POM=$DEVOPS/$FRONTEND/$BRAND/$SVN_ENV/pom.xml
[[ -f $SVN_POM ]] && BailOut "we have a missing pom file $(SVN_POM)"
svn cat $SVN_POM > /dev/null 2>&1 || BailOut "Can't fetch POM $SVN_POM"
POM=pom.xml
cd "$WSGC/$(dirname $FRONTEND)/trunk/$BRAND/$SVN_ENV" || BailOut "Couldn't cd to $BRAND $SVN_ENV frontend config directory $WSGC/$(dirname $FRONTEND)/trunk/$BRAND/$SVN_ENV "

CMX=$(propget -f $POM -p frontend.cmx)
WCM=$(propget -f $POM -p frontend.wcm)

if [ -n "$TICKET" ]
then
  TICKET=$(echo "$TICKET" | tr '[:lower:]' '[:upper:]' | sed -es/,/' '/g)
  for jira in $TICKET
  do
    echo "Jira:             https://jira.wsgc.com/browse/$jira"
  done
fi

ECM_ENV=$(get-ecm-info $BRAND $ENVIRO | sed -es/ecmagent-service-//g)

echo "Brand:            $BRAND"
echo "Environment:      $ENVIRO [$INSTALLATION]"
echo "Hostname:         $HOST"
echo "Market suffix:    $MARKET"
echo "ECM Environment:  $ECM_ENV"
echo "Deployments       $DEPLOYMENTS"
echo "BGB               $URI_BGB"
echo "BuildSystem       $URI_BSYS"
echo "WCM path suffix:  $WCM"
echo "CMX path suffix:  $CMX"
echo "ADG env:          $ADG_ENV"
echo "ADG branch:       $ADG_BRANCH"
echo "---"
echo "Options"
echo "CatImageBase:     $CAT_IMAGE"
echo "DocImageBase:     $DOC_IMAGE"
echo "ContentImageBase: $CONTENT_IMAGE"
[[ -n $CUSTOM_DOC_IMAGE ]] && echo "Custom DocImageBase: $CUSTOM_DOC_IMAGE"
[[ -n $CUSTOM_CAT_IMAGE ]] && echo "Custom CatImageBase: $CUSTOM_CAT_IMAGE"
[[ -n $CUSTOM_CONTENT_IMAGE ]] && echo "Custom ContentImageBase: $CUSTOM_CONTENT_IMAGE"

# this is a cheap hack so we don't end up with 2 slashes when the market is empty
if [[ -n $MARKET ]]
then
  m=$(grep "frontend.market" $POM)
  [[ -z $m ]] && Notation "You should add '<frontend.market>' to the frontend pom"
  MARKET="/$MARKET"
fi

showProps "Before:"

# convert params to lower-case
CAT_IMAGE=$(tr '[:upper:]' '[:lower:]' <<< $CAT_IMAGE)
DOC_IMAGE=$(tr '[:upper:]' '[:lower:]' <<< $DOC_IMAGE)
CONTENT_IMAGE=$(tr '[:upper:]' '[:lower:]' <<< $CONTENT_IMAGE)
CMX_ENVIRO=$(tr '[:upper:]' '[:lower:]' <<< $CMX_ENVIRO)

# update frontend.urlMappings
# propset -f $POM -p frontend.urlMappings -v "http://@NODENAME@/==https://@NODENAME@/,http://@NODENAME@.wsgc.com/==https://@NODENAME@.wsgc.com/,http://origin-$WWW/==https://origin-$WWW/,http://$WWW/==https://$WWW/"
if echo "$CAT_IMAGE $CONTENT_IMAGE $DOC_IMAGE" | egrep -iq "non-akamai|ecm"
then
  propset -f $POM -p frontend.urlMappings	-v "http://@SHORTNAME@/==https://@SHORTNAME@.wsgc.com/,http://@SHORTNAME@.wsgc.com/==https://@SHORTNAME@.wsgc.com/"
else
  #propset -f $POM -p frontend.urlMappings -v "http://@NODENAME@/==https://@NODENAME@/,http://@NODENAME@.wsgc.com/==https://@NODENAME@.wsgc.com/,http://origin-$WWW/==https://origin-$WWW/,http://$WWW/==https://$WWW/"
  #propset -f $POM -p frontend.urlMappings	-v "http://@SHORTNAME@/==https://@SHORTNAME@.wsgc.com/,http://@SHORTNAME@.wsgc.com/==https://@SHORTNAME@.wsgc.com/,http://origin-$WWW/==https://origin-$WWW/"
  propset -f $POM -p frontend.urlMappings	-v 'http://@SHORTNAME@/==https://@SHORTNAME@.wsgc.com/,http://@SHORTNAME@.wsgc.com/==https://@SHORTNAME@.wsgc.com/'
fi

#http://img-prd-rk1v.wsgc.com:49190/tmpl/,http://img-prd-rk2v.wsgc.com:49190/tmpl/,http://invadj-prd-rk1v.wsgc.com/odis-display-season-artifacts/
RCAUB="http://img-qa-rk1v.wsgc.com:49190/tmpl/,
http://img-qa-rk1v.wsgc.com:49190/tmpl2/,
http://img-qa-rk1v.wsgc.com:49190/tmpl/\${frontend.cmx}/,
http://img-qa-rk1v.wsgc.com:49190/tmpl/ecm/,\
http://img-qa-rk1v.wsgc.com:49190/ecm-non-prod-builds/internal/tmpl/,
http://img-qa-rk1v.wsgc.com:49190/ecm-non-prod-builds/internal/tmpl/ecm/,
http://img-qa-rk1v.wsgc.com:49190/wcm-non-prod-builds/internal/tmpl/,
http://img-qa-rk1v.wsgc.com:49190/wcm-non-prod-builds/internal/tmpl/recipe/,
http://img-qa-rk1v.wsgc.com:49190/wcm-non-prod-builds/internal/tmpl/catalogdata/,
http://img-qa-rk1v.wsgc.com:49190/wcm-non-prod-builds/internal/tmpl/\${frontend.cmx},
http://img-qa-rk1v.wsgc.com:49190/internal/ecm-non-prod-builds/internal/tmpl/,
http://img-qa-rk1v.wsgc.com:49190/internal/ecm-non-prod-builds/internal/tmpl/ecm/,
http://img-qa-rk1v.wsgc.com:49190/internal/wcm-non-prod-builds/internal/tmpl/recipe/,
http://img-qa-rk1v.wsgc.com:49190/internal/wcm-non-prod-builds/internal/tmpl/catalogdata/,
http://invadj-qa1-rk1v.wsgc.com/odis-display-season-artifacts/"
[[ -n $MARKET ]] && RCAUB="$RCAUB,
http://img-qa-rk1v.wsgc.com:49190${MARKET}/tmpl/,
http://img-prd-rk1v.wsgc.com:49190${MARKET}/tmpl/,
http://invadj-prd-rk1v.wsgc.com/odis-display-season-artifacts${MARKET}/"
# I don't think the prod paths need to be in the list
#http://img-prd-rk1v.wsgc.com:49190/tmpl/,
#http://invadj-prd-rk1v.wsgc.com/odis-display-season-artifacts/"
RCAUB=$(tr -d '\n' <<< $RCAUB)
RCAUB=$(tr -d ' ' <<< $RCAUB)
propset -f $POM -p frontend.remoteContentArchiveUrlBases -v "$RCAUB"

propset -f $POM -p frontend.crossdomainList -v '*.${frontend.domain},*.${frontend.brand}imgs.com,*.wsgc.com,smetrics.${frontend.domain},services.${frontend.domain}'
propset -f $POM -p frontend.contentArchiveLocation -v '/apps/ecimages/internal/archives/${frontend.brand}/'

nodeName=$(grep -i "<frontend.NodeName" $POM)
if [[ -n $nodeName ]]
then
  UGLY=$(host $HOST |grep -i address | awk '{ print $1 }' | awk -F\. '{ print $1 }')

  Notation "Set frontend.NodeName to $UGLY"
  propset -f $POM -p frontend.NodeName -v $UGLY
else
  Notation "POM does not contain frontend.NodeName"
fi

#weImagesUrl: qark-images.weimgs.com/weimgs/wcm-non-prod-assets/images/wcm/
#imagesUrl: qark-images.WSimgs.com/WSimgs/qa/images/dp/
#ecmImagesUrl: qark-images.WSimgs.com/WSimgs/CAN/qa/images/dp/

#CMX: DocImageBase -> ?

## catImageBase
#WCM: CatImageBase -> imagesAssetUri 
if [[ $CAT_IMAGE = "prod" ]]
then
    Notation "Set catImageBase for $CAT_IMAGE"
    if [[ $BRAND = "we" ]]
    then
        propset -f $POM -p frontend.catImageBase        -v "http://assets.\${frontend.brand}imgs.com/\${frontend.brand}imgs/rk/images/wcm/"
        propset -f $POM -p frontend.secureCatImageBase      -v "https://assets.\${frontend.brand}imgs.com/\${frontend.brand}imgs/rk/images/wcm/"
        UpdateADG imagesAssetUri "assets.weimgs.com/weimgs/rk/images/wcm/"
    else
        propset -f $POM -p frontend.catImageBase        -v "http://assets.\${frontend.brand}imgs.com/\${frontend.brand}imgs/rk/images/dp/"
        propset -f $POM -p frontend.secureCatImageBase      -v "https://assets.\${frontend.brand}imgs.com/\${frontend.brand}imgs/rk/images/dp/"
        UpdateADG imagesAssetUri "assets.WSimgs.com/WSimgs/rk/images/dp/"
    fi
fi

if [[ $CAT_IMAGE = "ca-qa1" || $CAT_IMAGE = "caqa" ]]
then
    Notation "Set catImageBase for $CAT_IMAGE"

    grep -q "<frontend.wcm.*>" $POM || BailOUt "To use this CatImagePath, the DP frontend pom must contain '<frontend.wcm>'"
    WCM="caqa"
    propset -f $POM -p frontend.wcm -v $WCM

    if [[ $BRAND = "we" ]]
    then
        propset -f $POM -p frontend.catImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/wcm/products/\${frontend.wcm}/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/wcm/products/\${frontend.wcm}/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/wcm/products/\${frontend.wcm}/"
    else
        propset -f $POM -p frontend.catImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/dp/\${frontend.wcm}/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/dp/\${frontend.wcm}/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/dp/\${frontend.wcm}/"
    fi
fi

# GMTP
if [[ $CAT_IMAGE = "wcm-nonprod" ]]
then
    Notation "Set catImageBase for $CAT_IMAGE"
    if [[ $BRAND = "we" ]]
    then
        propset -f $POM -p frontend.catImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/wcm/products/\${frontend.wcm}/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/wcm/products/\${frontend.wcm}/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/wcm/products/\${frontend.wcm}/"
    else
        propset -f $POM -p frontend.catImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/dp/\${frontend.wcm}/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/dp/\${frontend.wcm}/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}-images/wcm-non-prod-assets/images/dp/\${frontend.wcm}/"
    fi
fi

# GMTP
if [[ $CAT_IMAGE = "gmtp-nonprod" || $CAT_IMAGE = "ca-rgs1" ]]
then
    Notation "Set catImageBase for $CAT_IMAGE"
    if [[ $BRAND = "we" ]]
    then
        propset -f $POM -p frontend.catImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/wcm-non-prod-assets/images/wcm/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/wcm-non-prod-assets/images/wcm/"
        UpdateADG imagesAssetUri "https://$IMGHOST_EXT/\${frontend.brand}imgs/wcm-non-prod-assets/images/wcm/"
    else
        propset -f $POM -p frontend.catImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/wcm-non-prod-assets/images/dp/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/wcm-non-prod-assets/images/dp/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}imgs/wcm-non-prod-assets/images/dp/"
    fi
fi

if [[ $CAT_IMAGE = "qa" ]]
then
    Notation "Set catImageBase for $CAT_IMAGE"
    if [[ $BRAND = "we" ]]
    then
        propset -f $POM -p frontend.catImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/wcm/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/wcm/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/wcm/"
    else
        propset -f $POM -p frontend.catImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
    fi
fi

if [[ $CAT_IMAGE = "uat" ]]
then
    Notation "Set catImageBase for $CAT_IMAGE"
    if [[ $BRAND = "we" ]]
    then
        propset -f $POM -p frontend.catImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/wcm/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/wcm/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/wcm/"
    else
        propset -f $POM -p frontend.catImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
        propset -f $POM -p frontend.secureCatImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
        UpdateADG imagesAssetUri "$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
    fi
fi

## docImageBase
if [[ $DOC_IMAGE = "prod" ]]
then
  Notation "Set docImageBase for $DOC_IMAGE BuildSystem/BGB"
	propset -f $POM -p frontend.scriptSubPath 		  -v "\${frontend.brand}imgs${MARKET}/qark/images/"
  propset -f $POM -p frontend.docImageBase 		    -v "http://qark-images.\${frontend.brand}imgs.com/\${frontend.brand}imgs${MARKET}/qark/images/"
  propset -f $POM -p frontend.secureDocImageBase  -v "https://qark-images.\${frontend.brand}imgs.com/\${frontend.brand}imgs${MARKET}/qark/images/"
	propset -f $POM -p frontend.remoteProxyImageBase 	      -v "http://img-qa-rk1v.wsgc.com/\${frontend.brand}imgs${MARKET}/qark/images/"
	propset -f $POM -p frontend.secureRemoteProxyImageBase 	-v "https://img-qa-rk1v.wsgc.com/\${frontend.brand}imgs${MARKET}/qark/images/"

  # clear the frontend.cmx value
  sed -es/'<frontend.cmx>.*<'/'<frontend.cmx><'/g -i $POM

  UpdateADG ecmImagesUrl "qark-images.WSimgs.com/WSimgs${MARKET}/qark/images/dp/"
fi

if [[ $DOC_IMAGE = "uat" ]]
then
  Notation "Set docImageBase for $DOC_IMAGE BuildSystem/BGB"
	propset -f $POM -p frontend.scriptSubPath 		-v "\${frontend.brand}imgs/qark/images/"
  propset -f $POM -p frontend.docImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/"
  propset -f $POM -p frontend.secureDocImageBase 		-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/"
	propset -f $POM -p frontend.remoteProxyImageBase 	-v "http://${IMGPROXY}/\${frontend.brand}imgs/qark/images/"
	propset -f $POM -p frontend.secureRemoteProxyImageBase 	-v "https://${IMGPROXY}/\${frontend.brand}imgs/qark/images/"

  # clear the frontend.cmx value
  sed -es/'<frontend.cmx>.*<'/'<frontend.cmx><'/g -i $POM

  #UpdateADG ecmImagesUrl "qark-images.WSimgs.com/WSimgs${MARKET}/qark/images/dp/"
fi

# GMTP 
if [[ $DOC_IMAGE = "ca-rgs1" ]]
then
  Notation "Set docImageBase for $DOC_IMAGE BuildSystem/BGB"
  propset -f $POM -p frontend.scriptSubPath 		-v "\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"
  propset -f $POM -p frontend.docImageBase 		-v "http://${IMGHOST_EXT}/\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"
  propset -f $POM -p frontend.secureDocImageBase 		-v "https://${IMGHOST_EXT}/\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"
  propset -f $POM -p frontend.remoteProxyImageBase    -v "http://${IMGPROXY}/\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"
  propset -f $POM -p frontend.secureRemoteProxyImageBase -v "https://${IMGPROXY}/\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"

  #UpdateADG ecmImagesUrl "qark-images.WSimgs.com/WSimgs${MARKET}/qark/images/dp/"
fi

if [[ $DOC_IMAGE = "qa" || $DOC_IMAGE = "uat1" || $DOC_IMAGE = "uat3" ]]
then
  Notation "Set docImageBase for $DOC_IMAGE BuildSystem/BGB"
  propset -f $POM -p frontend.scriptSubPath 		-v "\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"
  propset -f $POM -p frontend.docImageBase 		-v "http://${IMGHOST_EXT}/\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"
  propset -f $POM -p frontend.secureDocImageBase 		-v "https://${IMGHOST_EXT}/\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"
  propset -f $POM -p frontend.remoteProxyImageBase    -v "http://${IMGPROXY}/\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"
  propset -f $POM -p frontend.secureRemoteProxyImageBase -v "https://${IMGPROXY}/\${frontend.brand}imgs/qark/images/\${frontend.cmx}/"

  [[ -n $CMX ]] && propset -f $POM -p frontend.cmx -v $CMX

  #UpdateADG ecmImagesUrl "qark-images.WSimgs.com/WSimgs/qark/images/dp/"
fi

## contentImageBase
#ECM: ContentImageBase -> ecmImagesAssetUri 
if [[ $CONTENT_IMAGE = "envpath" ]]
then
    propset -f $POM -p frontend.contentImageBase        -v "http://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
    propset -f $POM -p frontend.secureContentImageBase 	-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
fi

if [[ $CONTENT_IMAGE = "qa3" || $CONTENT_IMAGE = "ca-rgs1" || $CONTENT_IMAGE = "ca-uat1" ]]
then
  Notation "Set contentImageBase for $CONTENT_IMAGE [$MARKET]"
  propset -f $POM -p frontend.contentImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/ecm-non-prod-assets/images/dp/"
  propset -f $POM -p frontend.secureContentImageBase 	-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/ecm-non-prod-assets/images/dp/"
  propset -f $POM -p frontend.ecmPreviewUrl 	        -v "none"
  propset -f $POM -p frontend.ecmPreviewMode          -v "false"

  UpdateADG ecmImagesUrl "$IMGHOST_EXT/\${frontend.brand}imgs/ecm-non-prod-assets/images/dp/"
  UpdateADG ecmImagesAssetUri "$IMGHOST_EXT/\${frontend.brand}imgs/ecm-non-prod-assets/images/dp/"
fi

if [[ $CONTENT_IMAGE = "gmtp-nonprod" ]]
then
  Notation "Set contentImageBase for $CONTENT_IMAGE [$MARKET]"
  propset -f $POM -p frontend.contentImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs${MARKET}/qark/images/dp/"
  propset -f $POM -p frontend.secureContentImageBase 	-v "https://$IMGHOST_EXT/\${frontend.brand}imgs${MARKET}/qark/images/dp/"
  propset -f $POM -p frontend.ecmPreviewUrl 	        -v "none"
  propset -f $POM -p frontend.ecmPreviewMode          -v "false"

  UpdateADG ecmImagesUrl "qark-images.WSimgs.com/WS-images${MARKET}/qark/images/dp/"
  UpdateADG ecmImagesAssetUri "qark-images.WSimgs.com/WS-images${MARKET}/qark/images/dp/"
fi

if [[ $CONTENT_IMAGE = "ca-qa3" ]]
then
  Notation "Set contentImageBase for $CONTENT_IMAGE [$MARKET]"
  propset -f $POM -p frontend.contentImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/ecm-non-prod-assets/images/dp/"
  propset -f $POM -p frontend.secureContentImageBase 	-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/ecm-non-prod-assets/images/dp/"
  propset -f $POM -p frontend.ecmPreviewUrl 	        -v "none"
  propset -f $POM -p frontend.ecmPreviewMode          -v "false"

  UpdateADG ecmImagesUrl "$IMGHOST_EXT/\${frontend.brand}imgs/ecm-non-prod-assets/images/dp/"
  UpdateADG ecmImagesAssetUri "$IMGHOST_EXT/\${frontend.brand}imgs/ecm-non-prod-assets/images/dp/"
fi

if [[ $CONTENT_IMAGE = "prod" ]]
then
    Notation "Set contentImageBase for $CONTENT_IMAGE"
    propset -f $POM -p frontend.contentImageBase 		-v "http://assets.\${frontend.brand}imgs.com/\${frontend.brand}imgs${MARKET}/rk/images/dp/"
    propset -f $POM -p frontend.secureContentImageBase 	-v "https://assets.\${frontend.brand}imgs.com/\${frontend.brand}imgs${MARKET}/rk/images/dp/"
    propset -f $POM -p frontend.ecmPreviewUrl 	        -v "none"
    propset -f $POM -p frontend.ecmPreviewMode          -v "false"

    UpdateADG ecmImagesUrl "assets.WSimgs.com/WSimgs${MARKET}/rk/images/dp/"
    UpdateADG ecmImagesAssetUri "assets.WSimgs.com/WSimgs${MARKET}/rk/images/dp/"

    # just a sanity check to make sure things line up
    [[ $URI_BGB =~ prd ]] || Notation "BGB server (bgburi=$URI_BGB) is probably incorrect"
    [[ $URI_BSYS =~ prd ]] || Notation "BuildSystem server (bsuri=$URI_BSYS) is probably incorrect"
fi

if [[ $CONTENT_IMAGE = "uat" || $CONTENT_IMAGE = "uat1" ]]
then
    Notation "Set contentImageBase for $CONTENT_IMAGE"
    propset -f $POM -p frontend.contentImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs${MARKET}/qark/images/dp/"
    propset -f $POM -p frontend.secureContentImageBase 	-v "https://$IMGHOST_EXT/\${frontend.brand}imgs${MARKET}/qark/images/dp/"
    propset -f $POM -p frontend.ecmPreviewUrl 	        -v "none"
    propset -f $POM -p frontend.ecmPreviewMode          -v "false"

    UpdateADG ecmImagesUrl "qark-images.WSimgs.com/WSimgs${MARKET}/qark/images/dp/"
    UpdateADG ecmImagesAssetUri "qark-images.WSimgs.com/WSimgs${MARKET}/qark/images/dp/"
fi

if [[ $CONTENT_IMAGE = "qa" ]]
then
    Notation "Set contentImageBase for $CONTENT_IMAGE"
    propset -f $POM -p frontend.contentImageBase 		-v "http://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
    propset -f $POM -p frontend.secureContentImageBase 	-v "https://$IMGHOST_EXT/\${frontend.brand}imgs/qark/images/dp/"
    propset -f $POM -p frontend.ecmPreviewUrl 	        -v "none"
    propset -f $POM -p frontend.ecmPreviewMode          -v "false"

    UpdateADG ecmImagesUrl "qark-images.WSimgs.com/WSimgs/qark/images/dp/"
    UpdateADG ecmImagesAssetUri "qark-images.WSimgs.com/WSimgs/qark/images/dp/"
fi

if [[ $CONTENT_IMAGE = "non-akamai" ]]
then
    Notation "Set contentImageBase for $CONTENT_IMAGE"
    propset -f $POM -p frontend.contentImageBase 		-v "http://${IMGHOST}/\${frontend.brand}imgs/qark/images/dp/"
    propset -f $POM -p frontend.secureContentImageBase 	-v "https://${IMGHOST}/\${frontend.brand}imgs/qark/images/dp/"
    propset -f $POM -p frontend.ecmPreviewUrl 	        -v "none"
    propset -f $POM -p frontend.ecmPreviewMode          -v "false"

    UpdateADG ecmImagesUrl "${IMGHOST}/\${frontend.brand}imgs/qark/images/dp/"
    UpdateADG ecmImagesAssetUri "${IMGHOST}/\${frontend.brand}imgs/qark/images/dp/"
fi

propset -f $POM -p frontend.appBase			-v "https://$WWW/"
propset -f $POM -p frontend.secureAppBase	-v "https://$WWW/"

if [[ -n $CUSTOM_REMOTE_CONTENT ]]
then
  CUSTOM_REMOTE_CONTENT=$(echo "$CUSTOM_REMOTE_CONTENT" | sed -es%http.*//%%g -es:/*$::)
  propset -f $POM -p frontend.remoteContentArchiveUrlBases -v "http://$CUSTOM_REMOTE_CONTENT/"

  Notation "Custom frontend.remoteContentArchiveUrlBases: $(propget -f $POM -p frontend.remoteContentArchiveUrlBases 2>/dev/null)"

  [[ -n $TICKET ]] && jira-comment "$TICKET" "$ICON_INFO $(basename $0) Custom _remoteContentArchiveUrlBases_ {{$CUSTOM_REMOTE_CONTENT}}"
fi

if [[ -n $CUSTOM_DOC_IMAGE ]]
then
  CUSTOM_DOC_IMAGE=$(echo "$CUSTOM_DOC_IMAGE" | sed -es%http.*//%%g -es:/*$:: -es:/qa/:/qark/:g)
  propset -f $POM -p frontend.docImageBase 		    -v "http://$CUSTOM_DOC_IMAGE/"
  propset -f $POM -p frontend.secureDocImageBase  -v "https://$CUSTOM_DOC_IMAGE/"

  Notation "Custom frontend.docImageBase: $(propget -f $POM -p frontend.docImageBase 2>/dev/null)"

  #UpdateADG ecmImagesUrl "$CUSTOM_DOC_IMAGE/"

  [[ -n $TICKET ]] && jira-comment "$TICKET" "$ICON_INFO $(basename $0) Custom _docImageBase_ {{https://$CUSTOM_DOC_IMAGE}}"
fi

if [[ -n $CUSTOM_PROXY_IMAGE ]]
then
  CUSTOM_PROXY_IMAGE=$(echo "$CUSTOM_PROXY_IMAGE" | sed -es%http.*//%%g -es:/*$:: -es:/qa/:/qark/:g)
  propset -f $POM -p frontend.remoteProxyImageBase 		    -v "http://$CUSTOM_PROXY_IMAGE/"
  propset -f $POM -p frontend.secureRemoteProxyImageBase  -v "https://$CUSTOM_PROXY_IMAGE/"

  Notation "Custom frontend.remoteProxyImageBase: $(propget -f $POM -p frontend.remoteProxyImageBase 2>/dev/null)"

  #echo UpdateADG ecmImagesUrl "qark-images.WSimgs.com/WSimgs/$CUSTOM_PROXY_IMAGE"

  [[ -n $TICKET ]] && jira-comment "$TICKET" "$ICON_INFO $(basename $0) Custom _remoteProxyImageBase_ {{https://$CUSTOM_PROXY_IMAGE}}"
fi

if [[ -n $CUSTOM_CONTENT_IMAGE ]]
then
  CUSTOM_CONTENT_IMAGE=$(echo "$CUSTOM_CONTENT_IMAGE" | sed -es%http.*//%%g -es:/*$:: -es:/qa/:/qark/:g)
  propset -f $POM -p frontend.contentImageBase 		    -v "http://$CUSTOM_CONTENT_IMAGE/"
  propset -f $POM -p frontend.secureContentImageBase  -v "https://$CUSTOM_CONTENT_IMAGE/"

  Notation "Custom frontend.contentImageBase: $(propget -f $POM -p frontend.contentImageBase 2>/dev/null)"

  UpdateADG ecmImagesUrl "$CUSTOM_CONTENT_IMAGE/"
  UpdateADG ecmImagesAssetUri "$CUSTOM_CONTENT_IMAGE/"

  [[ -n $TICKET ]] && jira-comment "$TICKET" "$ICON_INFO $(basename $0) Custom _contentImageBase_ {{https://$CUSTOM_CONTENT_IMAGE}}"
fi

if [[ -n $CUSTOM_CAT_IMAGE ]]
then
  CUSTOM_CAT_IMAGE=$(echo "$CUSTOM_CAT_IMAGE" | sed -es%http.*//%%g -es:/*$:: -es:/qa/:/qark/:g)
  propset -f $POM -p frontend.catImageBase 		    -v "http://$CUSTOM_CAT_IMAGE/"
  propset -f $POM -p frontend.secureCatImageBase  -v "https://$CUSTOM_CAT_IMAGE/"

  Notation "Custom frontend.catImageBase: $(propget -f $POM -p frontend.catImageBase 2>/dev/null)"

  UpdateADG imagesAssetUri "$CUSTOM_CAT_IMAGE/"

  [[ -n $TICKET ]] && jira-comment "$TICKET" "$ICON_INFO $(basename $0) Custom _catImageBase_ {{https://$CUSTOM_CAT_IMAGE}}"
fi

if [[ -n $CUSTOM_SCRIPTSUBPATH ]]
then
  CUSTOM_SCRIPTSUBPATH=$(echo "$CUSTOM_SCRIPTSUBPATH" | sed -es%http.*//%%g -es:/*$:: -es:/qa/:/qark/:g)
  propset -f $POM -p frontend.scriptSubPath 		    -v "$CUSTOM_SCRIPTSUBPATH/"
  
  Notation "Custom frontend.scriptSubPath: $(propget -f $POM -p frontend.scriptSubPath 2>/dev/null)"

  [[ -n $TICKET ]] && jira-comment "$TICKET" "$ICON_INFO $(basename $0) Custom _scriptSubPath_ {{$CUSTOM_SCRIPTSUBPATH}}"
fi

showProps "After:"

DIFF=$(svn diff $POM | egrep "^-|^\+" | grep -iv pom.xml | sort -r -k2)
echo "POM Diff:"
echo "$DIFF"

Notation "Commit $POM"
MESSAGE="$(basename $0): $BRAND $ENVIRO catImage=$CAT_IMAGE contentImage=$CONTENT_IMAGE documentImage=$DOC_IMAGE ($BUILD_USER_ID)"
svn up -q
svn commit -q -m "[$COMMENT] $MESSAGE" $POM

# update ADG repo
cd $(dirname $VALUES)
ADG_DIFF=$(git diff | egrep "^-|^\+" | egrep -vi "values.yaml" | sort -r -k2)
[[ -n $ADG_DIFF ]] && echo "ADG Diff:
$ADG_DIFF"
if [[ $UPDATE_ADG = "true" ]]
then
  Notation "Commit ADG $(basename $VALUES)"
  git add $VALUES
  git commit -q -m "[$COMMENT] $MESSAGE" $VALUES
  git push -q

  # rebuild ADG
#  commit-check TAG=$(basename $0) $(awk -F: '{ print $2 }' <<< $ADG_REPO)
#  if [[ $? -eq 0 ]]
#  then
#    Notation "Rebuild ADG $ADG_ENV"
#    $JENKINS build -s k8s-deployers/job/ecom/job/delivery-gateway/job/$ADG_ENV
#    if [[ $? -ne 0 ]]
#    then
#      Notation "ADG $ADG_ENV failed?"
#      #slack-comment -c team-ecom-mead -m "ADG rebuild of $ADG_ENV failed" -f $(basename $0)
#    else
#      Notation "No new ADG commits"
#    fi
#  fi
else
  Notation "ADG changes will not be committed"
fi

# update deployment properties
if [[ -n $CMX_ENVIRO && $CMX_ENVIRO != nochange ]]
then
  Notation "Update CMX Environment to $CMX_ENVIRO"

  cd $WSGC
  DIR=deployments
  svn co -q $(dirname $DEPLOYMENTS) $DIR || BailOut "Unable to svn co $DEPLOYMENTS"

  case $CMX_ENVIRO in
    uat3 ) 
      BGB=bgb-uat3-rk1v.wsgc.com
      BS=buildsystem-uat3-rk1v.wsgc.com
      CMX_DIR=uat1
    ;;

    uat1 ) 
      BGB=bgb-uat1-rk1v.wsgc.com:49443
      BS=bgb-uat1-rk1v.wsgc.com
      CMX_DIR=uat1
    ;;

    rgs1 ) 
      BGB=bgb-rgs1-rk1v.wsgc.com
      BS=buildsystem-rgs1-rk1v.wsgc.com
      CMX_DIR=uat1
    ;;

    ca-rgs1 | cargs | ca-rgs ) 
      BGB=bgb-ca-rgs1-rk1v.wsgc.com
      BS=buildsystem-ca-rgs1-rk1v.wsgc.com
      CMX_DIR=cargs
    ;;

    prod )
      BGB=bgb.wsgc.com
      BS=buildsystem-prd-rk1v.wsgc.com
      CMX_DIR=
    ;;

    prod2 )
      BGB=bgb.wsgc.com
      BS=buildsystem-prd-rk2v.wsgc.com
      CMX_DIR=
    ;;

    ca-prod )
      BGB=bgb-ca-prd-rk1v.wsgc.com
      BS=buildsystem-ca-prd-rk1v.wsgc.com
      CMX_DIR=
    ;;

    * ) BailOut "No idea which CMX environment to use" ;;
  esac

  cd "$WSGC/$(dirname $FRONTEND)/trunk/$BRAND/$SVN_ENV"
  Notation "Set frontend.cmx to $CMX_DIR"
  grep -iq "frontend.cmx" $POM || BailOut "POM for $BRAND $ENVIRO does not contain frontend.cmx"
  propset -f $POM -p frontend.cmx -v $CMX_DIR
  svn up -q
  svn commit -q -m "[$COMMENT] set $BRAND $ENVIRO frontend.cmx to /$CMX_DIR/" 

  m=$(get-market $BRAND $ENVIRO | tr '[:upper:]' '[:lower:]')
  [[ $m =~ us ]] && m=
  PROPFILE=$DIR/$BRAND$m.properties
  cd $WSGC
  [[ -e $PROPFILE ]] || BailOut "Can't find deployment file ($PROPFILE)"

  SCHEMA=$(getschema $BRAND $ENVIRO)
  [[ -z $SCHEMA ]] && BailOut "Can't get schema for $BRAND $SVN_ENV"
  DB_PROPS=$(getdb $SCHEMA)
  [[ -z $DB_PROPS ]] && BailOut "Can't get db props for schema $SCHEMA ($BRAND $SVN_ENV)"
  SCHEMA=$(echo $SCHEMA | awk -F: '{ print $1 }')

  dbHost=$(echo "$DB_PROPS" | awk -F\| '{ print $1 }')
  dbOwner=$(echo "$DB_PROPS" | awk -F\| '{ print $2 }' | tr '[:upper:]' '[:lower:]')
  dbUser=$(echo "$DB_PROPS" | awk -F\| '{ print $3 }')
  dbPass=$(echo "$DB_PROPS" | awk -F\| '{ print $4 }')
  dbSID=$(echo "$DB_PROPS" | awk -F\| '{ print $5 }' | tr '[:upper:]' '[:lower:]')
  dbPort=$(echo "$DB_PROPS" | awk -F\| '{ print $6 }')
  dbTable=$(echo "$DB_PROPS" | awk -F\| '{ print $7 }')
  dbConnect=$(echo "$DB_PROPS" | awk -F\| '{ print $10 }')

  Notation "Update $PROPFILE"
  grep -q "^DBSchema=" $PROPFILE || echo "DBSchema=" >> $PROPFILE
  grep -q "^DBHost=" $PROPFILE || echo "DBHost=" >> $PROPFILE
  grep -q "^DBInst=" $PROPFILE || echo "DBInst=" >> $PROPFILE
  grep -q "^DBUid=" $PROPFILE || echo "DBUid=" >> $PROPFILE
  grep -q "^DBPwd=" $PROPFILE || echo "DBPwd=" >> $PROPFILE
  #grep -q "^bgb.stage=" $PROPFILE || echo "bgb.stage=" >> $PROPFILE
  grep -q "^bgburi=" $PROPFILE || echo "bgburi=" >> $PROPFILE
  grep -q "^bsuri=" $PROPFILE || echo "bsuri=" >> $PROPFILE

  sed -es%"DBSchema=.*"%"DBSchema=${SCHEMA}"%g -i $PROPFILE
  sed -es%"DBHost=.*"%"DBHost=${dbHost}"%g -i $PROPFILE
  sed -es%"DBInst=.*"%"DBInst=${dbSID}"%g -i $PROPFILE
  sed -es%"DBUid=.*"%"DBUid=${dbUser}"%g -i $PROPFILE
  sed -es%"DBPwd=.*"%"DBPwd=${dbPass}"%g -i $PROPFILE
  #sed -es%"bgb.stage=.*"%"bgb.stage=$INSTALLATION"%g -i $PROPFILE
  sed -es%"bgburi=.*"%"bgburi=https://$BGB"%g -i $PROPFILE
  sed -es%"bsuri=.*"%"bsuri=https://$BS"%g -i $PROPFILE

  sed -es%"host=.*"%"host=$HOST"%g -i $PROPFILE
  sed -es%"ActInstallation=.*"%"ActInstallation=$INSTALLATION"%g -i $PROPFILE

  cd $DIR
  svn up -q
  svn commit -q -m "[$COMMENT] $(basename $0): set $BRAND $ENVIRO CMX to $CMX_ENVIRO" 

  eval $JENKINS build wsgc-devops-frontend21-qa-single-env -p BRAND=${BRAND} -p ENVIRONMENT=${SVN_ENV} >/dev/null 2>&1 &

  #CONTENT=$(jenkins-jnlp list-jobs | grep -i "deploy-$ENVIRO-$BRAND-CONTENT")
  #[[ -z $CONTENT ]] && BailOut "Can't find content job for $BRAND $ENVIRO"
  #Notation "Build $CONTENT"
  #eval jenkins-jnlp build -s $CONTENT -p FORCEBUILD=true -p TICKET=$TICKET
  #eval jenkins-jnlp build -s $CONTENT -p FORCEBUILD=false -p TICKET=$TICKET

  #eval $JENKINS build generate-deployment-matrix-data -p ENV_LIST=${ENVIRO} >/dev/null 2>&1 &
fi

if [[ -n $TICKET ]]
then 
  msg="${ICON_SUCC}${MESSAGE}"    
  [[ $UPDATE_ADG = "false" && -n $ADG_DIFF ]] && msg="$msg
${ICON_INFO} ADG changes not committed"
  [[ -n $DIFF ]] && comment="$msg {noformat:title=POM diff}$DIFF{noformat}"
  [[ -n $ADG_DIFF ]] && msg="$msg {noformat:title=ADG difff}$ADG_DIFF{noformat}"
  jira-comment "$TICKET" "$msg"
  jira-label "$TICKET" enh:update-content-paths
fi

# check schema
#chkschema $BRAND $ENVIRO $TICKET

if [[ $TRIGGER = "true" ]]
then
  Notation "Re-deploy $BRAND $SVN_ENV"
  [[ $UPDATE_ADG =~ true ]] && UPDATE_ADG="-p Options=Rebuild-MFE" || UPDATE_ADG=
  #eval $JENKINS build wsgc-devops-frontend21-qa-single-env -p BRAND=${BRAND} -p ENVIRONMENT=${SVN_ENV} >/dev/null 2>&1 &
  eval $JENKINS build checkenv \
    -p Brand=$BRAND \
    -p Environment=$SVN_ENV \
    $UPDATE_ADG \
    -p Options=Clear-Logs \
    -p Options=Rebuild-Config \
    -p Options=Deploy-War \
    -p Options=Deploy-Content \
    -p Options=Force-Content \
    -p Ticket="$TICKET"
else
  Notation "Rebuild frontend config"
  eval $JENKINS build wsgc-devops-frontend21-qa-single-env -p BRAND=${BRAND} -p ENVIRONMENT=${SVN_ENV} >/dev/null 2>&1 &
fi

eval $JENKINS build checkenv \
  -p Brand=$BRAND \
  -p Environment=$SVN_ENV \
  -p Options=Check-Schema \
  -p Ticket="$TICKET"

#eval $JENKINS build wsgc-devops-frontend21-qa-${BRAND}-app-config >/dev/null 2>&1 &

cd /tmp
rm -rf $WSGC

exit 0

