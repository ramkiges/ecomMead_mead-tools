#!/bin/bash
# this script takes a list of repos on the command line, and returns 0 if any of them have recent commits
# commits are stored in a text file to compare across runs
# commit-check - sets commit ID in datafile
# commit-check - removes commit id from datafile 
PATH=/bin:/usr/bin:/sbin:/usr/local/bin:/apps/mead-tools:$PATH

COMMIT_STORE=$HOME/.commit-datastore
# initial status indicates no fresh commits
STATUS=1

bailOut() {
  [[ -n $1 ]] && echo "$*" >&2
  echo "Usage: $(basename $0) [TAG=] <repo> ..." >&2
  [[ $MODE = "commit-check" ]] && echo "Returns 0 to indicate there is a newer commit; non-zero to indicate error or no change" >&2
  exit 255
}

# set the run mode
MODE=$(basename $0)

[[ -z $1 ]] && bailOut
[[ -z $COMMIT_STORE ]] && BailOUt "Why is COMMIT_STORE blank?"
mkdir -p $COMMIT_STORE || bailOut "Unable to create commit store $COMMIT_STORE"

# cleanup
find $COMMIT_STORE -type f -mtime +30 -ctime +30 -delete >/dev/null 2>&1

# create an enviro tag so we can keep track of success on a per-environment basis
if [[ $1 =~ TAG= ]]
then 
  TAG="$(echo $1 | awk -F= '{ print $2 }')-"
  shift
fi

for entry in $*
do
  # perform some normalization on the inputs
  entry=$(echo "$entry" | sed -es/git@github.wsgc.com://g)
  org=$(echo "$entry" | awk -F/ '{ print $1 }' | awk -F: '{ print $1 }' | sed -es/eCommerce-//g)
  repo=$(echo "$entry" | awk -F/ '{ print $1 "/" $2 }')
  branch=$(echo "$entry" | awk -F/ '{ print $3 }')
  [[ -z $org ]] && org="eCommerce-Bedrock"
  [[ -z $branch ]] && branch="release"

  # datafile in which to store the commit
  DATA="$COMMIT_STORE/${TAG}$(echo $repo | sed -es/\.git//g -es%/%:%g):$branch"
  DATA=$(tr '[:upper:]' '[:lower:]' <<< $DATA)

  # if the mode is to clear, remove the file and move on
  [[ $MODE =~ clear ]] && { rm -f $DATA; STATUS=0; continue; } 

  # compare old and now commits
  OLD_COMMIT=$(cat $DATA 2>/dev/null)
  NEW_COMMIT=$(git ls-remote git@github.wsgc.com:$repo refs/heads/$branch 2>/dev/null | awk '{ print $1 }')
  # if we can't get a new commit, assume we need to run it
  if [[ -z $NEW_COMMIT ]]
  then
    #echo
    #echo "*** $(basename $0): Unable to get most recent commit for git@github.wsgc.com:$repo refs/heads/$branch ***"
    STATUS=0
    continue
  fi

  # if commit is the same, move on to the next one
  [[ $OLD_COMMIT = $NEW_COMMIT ]] && continue

  # save the new commit
  echo $NEW_COMMIT > $DATA

  # set status flag to 0 - this means at least one of the repos was recently committed
  STATUS=0
done

# if we've not exited 0 by now, there are no new commits
exit $STATUS
