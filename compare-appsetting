#!/bin/bash
PATH=/apps/mead-tools:/apps:/apps/scm-tools:/apps/maven/latest/bin:/apps/java/bin:/apps/emacs-nox-24.5/bin:/home/mavenbuild/bin/devscripts:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/puppetlabs/bin:/home/mavenbuild/bin:~/bin
export PATH
#BUILD_USER_ID="${option.BUILD_USER_ID}"

WARN="×"
DEBUG=1
JENKINS_URL="https://ecombuild.wsgc.com/jenkins"
APPSETTINGS="https://repos.wsgc.com/svn/devops/packaging/wsgc-appsettings-configuration/trunk/appsetting-properties/schema-site"
WSGC=/apps/tmp/wsgc-$(basename $0)
export LC_CTYPE=en_US.UTF-8
export LC_ALL=C
LOG="/apps/$(basename $0).log"
JMX_PORT=39667
DEFAULT_EMAIL="ecomHuron@wsgc.com"
TIMEOUT="--connect-timeout 20  --max-time 120"
USER_AGENT="--user-agent $(basename $0)"
LOGIN="ptqaenv:ta8PoLe"
DAYS=5
DEBUG=false

# SQL Plus constants
ORACLE_ERROR="selected|error:|ORA-|SP2-|Usage:|<proxy>|<logon>|^$|violated|constraint|error at line|no rows selected|^$"
PATH=$PATH:/usr/lib/oracle/instantclient_19_6
SQLPLUS=/usr/lib/oracle/instantclient_19_6/sqlplus
ORACLE_INSTANTCLIENT_LIB_DIR=/usr/lib/oracle/instantclient_19_6/
export LD_LIBRARY_PATH="${ORACLE_INSTANTCLIENT_LIB_DIR}:${LD_LIBRARY_PATH:-}"
export PATH
SQL_HEADER="set heading off
set define off
set echo off
set colsep ' '
set pagesize 0
set trimspool on
set headsep off
set linesize 100
set feedback off
set timing off
set time off
set termout off"

[[ $RD_OPTION_BUILD_USER_ID =~ svc || $RD_OPTION_BUILD_USER_ID =~ ciuser ]] || RUNBY=${RD_OPTION_BUILD_USER_ID}
[[ -z $RUNBY ]] && RUNBY=${RD_OPTION_BUILD_USER_ID}

# Jira icons
ICON_FAIL=" (x) "
ICON_SUCC=" (/) "
ICON_WARN=" (!) "
ICON_INFO=" (i) "

BailOut() {
	[ -n "$1" ] && echo "
$(hostname)/$(basename $0): 
***
ERROR: $*
***" >&2
    [[ -n $TICKET ]] && jira-comment "$TICKET" "${ICON_FAIL}$(basename $0) failed $BUILD_URL [${RUNBY}]" 

  rm -f $MSG $TBL
	exit 1
}

Debug() {
  [[ $DEBUG =~ tru ]] && echo "$*" >&2
}

Warning() { 
    echo "///
WARNING: $* 
///" >&2
    [[ -n $TICKET ]] && jira-comment "$TICKET" "${ICON_WARN}$(basename $0): $* [${RUNBY}]"
}

timeStamp() { echo ">>>> $* $(date +'%Y-%m-%d %H:%M') <<<<"; }

getSettingDB() {
  Debug "/$FUNCNAME $*/"
  src=$(tr '[:lower:]' '[:upper:]' <<< $1)
  col=$(tr '[:lower:]' '[:upper:]' <<< $2)
  name=$(tr '[:lower:]' '[:upper:]' <<< $3)
  scope=$(tr '[:upper:]' '[:lower:]' <<< $4)

  SQL="$SQL_HEADER
select distinct $col from ww_setting_values
where setting_group='$SETTING_GROUP' and setting_name='$name' and "
  [[ $src = "X" ]] && { SQL="$SQL site='$X_SITE' and setting_scope='$scope';"; CON=$X_CONNECT; }
  [[ $src = "Y" ]] && { SQL="$SQL site='$Y_SITE' and setting_scope='$scope';"; CON=$Y_CONNECT; }

  #Debug "$SQL"
  echo "$SQL" | $SQLPLUS -S "$CON" | egrep -v "^$" | tail -1 | tr -d '\n'
}

getSettingList() {
  Debug "/$FUNCNAME/"
  src=$(tr '[:lower:]' '[:upper:]' <<< $1)

  SQL="$SQL_HEADER
select distinct SETTING_NAME from ww_setting_values
where setting_group = '$SETTING_GROUP' and "
  [[ $src = "X" ]] && { SQL="$SQL site='$X_SITE' and (setting_scope='$X_INST' or setting_scope='default');"; CON=$X_CONNECT; }
  [[ $src = "Y" ]] && { SQL="$SQL site='$Y_SITE' and (setting_scope='$Y_INST' or setting_scope='default');"; CON=$Y_CONNECT; }

  Debug "$SQL"
  echo "$SQL" | $SQLPLUS -S "$CON" 2>&1 | egrep -vi "$ORACLE_ERROR" | tr '\n' ' '
}

MSG=$(mktemp -t tmp.$(basename $0)XXX )
find /tmp -type f -name "tmp.$(basename $0)*" -mtime +1 -delete 2>/dev/null

updateMsg() {
  echo "$*" >> $MSG
}

TBL=$(mktemp -t tmp.$(basename $0)XXX )
updateTbl() {
  echo "$*" >> $TBL
}

GETSCHEMA=$(which get-schema 2>/dev/null)
[ -z "$GETSCHEMA" ] && BailOut "Can't find getschema"

JENKINS=$(which jenkins-jnlp 2>/dev/null)
[ -z "$JENKINS" ] && BailOut "Can't find jenkins-jnlp"

while getopts "w:a:b:s:x:y:t:d:" opt 
do
  case ${opt} in
    w ) BLAME=$(tr '[:upper:]' '[:lower:]' <<< $OPTARG) ;;
    d ) DEBUG=$(tr '[:upper:]' '[:lower:]' <<< $OPTARG) ;;
    a ) BRAND_X=$(tr '[:upper:]' '[:lower:]' <<< $OPTARG) ;;
    b ) BRAND_Y=$(tr '[:upper:]' '[:lower:]' <<< $OPTARG) ;;
    x ) ENVIRO_X=$(tr '[:upper:]' '[:lower:]' <<< $OPTARG) ;;
    y ) ENVIRO_Y=$(tr '[:upper:]' '[:lower:]' <<< $OPTARG) ;;
    s ) SETTING=$(tr '[:lower:]' '[:upper:]' <<< $OPTARG) ;;
    t ) TICKET=$(tr '[:lower:]' '[:upper:]' <<< $OPTARG) ;;
  esac
done

[[ $BRAND_X =~ select ]] && BRAND_X=
[[ $BRAND_Y =~ select ]] && BRAND_Y=
[[ $ENVIRO_X =~ select ]] && ENVIRO_X=
[[ $ENVIRO_Y =~ select ]] && ENVIRO_Y=

[[ -z $BRAND_X ]] && BailOut "Need Brand X"
[[ -z $ENVIRO_X ]] && BailOut "Need Enviro X"
[[ -z $BRAND_Y ]] && BRAND_Y=$BRAND_X
[[ -z $ENVIRO_Y ]] && BRAND_Y=$ENVIRO_Y

[[ "$ENVIRO_X" = "$ENVIRO_Y" && "$BRAND_X" = "$BRAND_Y" ]] && echo "Please note: Both 'X' and 'Y' environments are the same"
[[ -z $SETTING ]] && BailOut "Need setting"
[[ $TICKET =~ DEVOPS ]] && TICKET=

X_SCHEMA=$(get-schema $BRAND_X $ENVIRO_X)
X_DB=$(getdb $X_SCHEMA)
X_SITE=$(brand2site $BRAND_X $ENVIRO_X)
X_INST=$(get-installation $BRAND_X $ENVIRO_X)
X_SCOPE=$(get-overridescope $BRAND_X $ENVIRO_X)
X_dbHost=$(echo "$X_DB" | awk -F\| '{ print $1 }')
X_dbOwner=$(echo "$X_DB" | awk -F\| '{ print $2 }' | tr '[:upper:]' '[:lower:]')
X_dbUser=$(echo "$X_DB" | awk -F\| '{ print $3 }')
X_dbPass=$(echo "$X_DB" | awk -F\| '{ print $4 }')
X_dbSID=$(echo "$X_DB" | awk -F\| '{ print $5 }' | tr '[:upper:]' '[:lower:]')
X_dbPort=$(echo "$X_DB" | awk -F\| '{ print $6 }')
X_dbConnect=$(echo "$X_DB" | awk -F\| '{ print $10 }')
X_CONNECT="${X_dbUser}/${X_dbPass}@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=${X_dbHost})(PORT=${X_dbPort}))(CONNECT_DATA=($X_dbConnect=${X_dbSID})))"
X_DB_PATH=$(getdb $X_SCHEMA 2>/dev/null | awk -F\| '{ print $5 }')
X_SCHEMA_PATH=$($GETSCHEMA $BRAND_X $ENVIRO_X | awk -F: '{ print $1 }')
X_OVERRIDE=$APPSETTINGS/$X_DB_PATH/$X_SCHEMA_PATH/$BRAND_X/override/override.properties

Y_SCHEMA=$(get-schema $BRAND_Y $ENVIRO_Y)
Y_DB=$(getdb $Y_SCHEMA)
Y_SITE=$(brand2site $BRAND_Y $ENVIRO_Y)
Y_INST=$(get-installation $BRAND_Y $ENVIRO_Y)
Y_SCOPE=$(get-overridescope $BRAND_Y $ENVIRO_Y)
Y_dbHost=$(echo "$Y_DB" | awk -F\| '{ print $1 }')
Y_dbOwner=$(echo "$Y_DB" | awk -F\| '{ print $2 }' | tr '[:upper:]' '[:lower:]')
Y_dbUser=$(echo "$Y_DB" | awk -F\| '{ print $3 }')
Y_dbPass=$(echo "$Y_DB" | awk -F\| '{ print $4 }')
Y_dbSID=$(echo "$Y_DB" | awk -F\| '{ print $5 }' | tr '[:upper:]' '[:lower:]')
Y_dbPort=$(echo "$Y_DB" | awk -F\| '{ print $6 }')
Y_dbConnect=$(echo "$Y_DB" | awk -F\| '{ print $10 }')
Y_CONNECT="${Y_dbUser}/${Y_dbPass}@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=${Y_dbHost})(PORT=${Y_dbPort}))(CONNECT_DATA=($Y_dbConnect=${Y_dbSID})))"
Y_DB_PATH=$(getdb $Y_SCHEMA 2>/dev/null | awk -F\| '{ print $5 }')
Y_SCHEMA_PATH=$($GETSCHEMA $BRAND_Y $ENVIRO_Y | awk -F: '{ print $1 }')
Y_OVERRIDE=$APPSETTINGS/$Y_DB_PATH/$Y_SCHEMA_PATH/$BRAND_Y/override/override.properties

# look for alien entries in overrideScope 
X_ALIEN_SCOPE=$(echo "$X_SCOPE" | sed -es/default//gi -es/$X_INST\\b//g -es/','/' '/g | tr -d '[:space:]')
Y_ALIEN_SCOPE=$(echo "$Y_SCOPE" | sed -es/default//gi -es/$Y_INST\\b//g -es/','/' '/g | tr -d '[:space:]')

SETTING_GROUP=$(awk -F\. '{ print $1 }' <<< $SETTING)
SETTING_NAME=$(awk -F\. '{ print $2 }' <<< $SETTING)

updateMsg "---
$BRAND_X $ENVIRO_X:
· siteID:         $X_SITE 
· Schema:         $X_SCHEMA 
· Installation:   $X_INST 
· overrideScope:  $X_SCOPE "
[[ -n $X_ALIEN_SCOPE ]] && updateMsg "$WARN Unexpected environment in overrideScope {$X_ALIEN_SCOPE}"

updateMsg "
$BRAND_Y $ENVIRO_Y:  
· siteID:         $Y_SITE 
· Schema:         $Y_SCHEMA 
· Installation:   $Y_INST 
· overrideScope:  $Y_SCOPE"
[[ -n $Y_ALIEN_SCOPE ]] && updateMsg "$WARN Unexpected environment in overrideScope {$Y_ALIEN_SCOPE}"

# create a DB scope variable
X_DB_SCOPE=$(echo "$X_SCOPE" | sed -es/default//gi | tr ',' ' ' | awk '{ print $1 }' | tr -d '[:space:]')
Y_DB_SCOPE=$(echo "$Y_SCOPE" | sed -es/default//gi | tr ',' ' ' | awk '{ print $1 }' | tr -d '[:space:]')

# if we only have a setting group, go fish for the setting names
if [[ -z $SETTING_NAME ]]
then 
  SETTING_NAME_X=$(getSettingList X)
  SETTING_NAME_Y=$(getSettingList Y)
  SETTING_NAME=$(echo "$SETTING_NAME_X $SETTING_NAME_Y" | xargs -n1 | sort -u | tr '\n' ' ')
  #Debug "SETTINGS in $SETTING_GROUP: $SETTING_NAME"
fi

for name in $SETTING_NAME
do
  echo "Analyzing ${SETTING_GROUP}.${name} "
  X_TYPE_O=
  Y_TYPE_O=
  X_TYPE_D=
  Y_TYPE_D=

# I need to do the variable exansion ${!} trick here

  X_TYPES_SVN=$(svn --non-interactive cat $X_OVERRIDE | grep "^$SETTING_GROUP\.$name" | awk -F\. '{ print $4 }' | awk -F= '{ print $1 }'| sort -u | tr '\n' ' ' | sed -es/' $'//g)
  Y_TYPES_SVN=$(svn --non-interactive cat $Y_OVERRIDE | grep "^$SETTING_GROUP\.$name" | awk -F\. '{ print $4 }' | awk -F= '{ print $1 }'| sort -u | tr '\n' ' ' | sed -es/' $'//g)

  X_VALUE_O=$(getSettingDB X setting_value $name $X_DB_SCOPE)
  Y_VALUE_O=$(getSettingDB Y setting_value $name $Y_DB_SCOPE)
  [[ -n $X_VALUE_O ]] && X_TYPE_O=$(getSettingDB X setting_type $name $X_DB_SCOPE)
  [[ -n $Y_VALUE_O ]] && Y_TYPE_O=$(getSettingDB Y setting_type $name $Y_DB_SCOPE)
  [[ -z $X_VALUE_O ]] && X_VALUE_O="<null>"
  [[ -z $Y_VALUE_O ]] && Y_VALUE_O="<null>"
  [[ -z $X_TYPE_O ]] && X_TYPE_O="␀"
  [[ -z $Y_TYPE_O ]] && Y_TYPE_O="␀"

  X_VALUE_D=$(getSettingDB X setting_value $name default)
  Y_VALUE_D=$(getSettingDB Y setting_value $name default)
  [[ -n $X_VALUE_D ]] && X_TYPE_D=$(getSettingDB X setting_type $name default)
  [[ -n $Y_VALUE_D ]] && Y_TYPE_D=$(getSettingDB Y setting_type $name default)
  [[ -z $X_VALUE_D ]] && X_VALUE_D="<null>"
  [[ -z $Y_VALUE_D ]] && Y_VALUE_D="<null>"
  [[ -z $X_TYPE_D ]] && X_TYPE_D="␀"
  [[ -z $Y_TYPE_D ]] && Y_TYPE_D="␀"

  X_SVN=$(svn --non-interactive cat $X_OVERRIDE | grep "^$SETTING_GROUP\.$name.$ENVIRO_X")
  Y_SVN=$(svn --non-interactive cat $Y_OVERRIDE | grep "^$SETTING_GROUP\.$name.$ENVIRO_Y")
  [[ -z $X_SVN ]] && X_SVN="<null>"
  [[ -z $Y_SVN ]] && Y_SVN="<null>"

  X_DP=$(get-dp-setting $BRAND_X $ENVIRO_X $SETTING_GROUP.$name)
  Y_DP=$(get-dp-setting $BRAND_Y $ENVIRO_Y $SETTING_GROUP.$name)
  [[ -z $X_DP ]] && X_DP="<null>"
  [[ -z $Y_DP ]] && Y_DP="<null>"

  X_APP_SRC=$(appsetting-source $BRAND_X $ENVIRO_X $SETTING_GROUP.$name)
  Y_APP_SRC=$(appsetting-source $BRAND_Y $ENVIRO_Y $SETTING_GROUP.$name)

  updateMsg "---
$SETTING_GROUP.$name
  
» Database - defaultScope
· $BRAND_X $ENVIRO_X:  [$X_TYPE_D]  $X_VALUE_D
· $BRAND_Y $ENVIRO_Y:  [$Y_TYPE_D]  $Y_VALUE_D

» Database - overrideScope
· $BRAND_X $ENVIRO_X:  [$X_TYPE_O]  $X_VALUE_O
· $BRAND_Y $ENVIRO_Y:  [$Y_TYPE_O]  $Y_VALUE_O"

  updateMsg "
» DP"
updateMsg "· $BRAND_X $ENVIRO_X: $X_APP_SRC"
updateMsg "· $BRAND_Y $ENVIRO_Y: $Y_APP_SRC"

  updateMsg "
» Subversion overrride"
  updateMsg "· $BRAND_X $ENVIRO_X: $X_SVN"
  [[ $(echo "$X_SVN" | wc -w) -gt 1 ]] && updateMsg "$WARN Multiple entries found for $ENVIRO_X $SETTING_GROUP.$name in $X_SCHEMA overrides"
  [[ $(echo "$X_TYPES_SVN" | wc -w) -gt 1 ]] && updateMsg "$WARN Multiple datatypes found for $SETTING_GROUP.$name in $X_SCHEMA overrides {$X_TYPES_SVN}"

  updateMsg "· $BRAND_Y $ENVIRO_Y: $Y_SVN"
  [[ $(echo "$Y_SVN" | wc -w) -gt 1 ]] && updateMsg "$WARN Multiple entries found for $ENVIRO_Y $SETTING_GROUP.$name in $Y_SCHEMA overrides"
  [[ $(echo "$Y_TYPES_SVN" | wc -w) -gt 1 ]] && updateMsg "$WARN Multiple datatypes found for $SETTING_GROUP.$name in $Y_SCHEMA overrides {$Y_TYPES_SVN}"

  if [[ $BLAME =~ true ]]
  then
    echo "Blaming ${SETTING_GROUP}.${name} "
    X_WHO=$(appsetting-blame $BRAND_X $ENVIRO_X "$SETTING_GROUP.$name.$ENVIRO_X.$X_TYPE_O")
    Y_WHO=$(appsetting-blame $BRAND_Y $ENVIRO_Y "$SETTING_GROUP.$name.$ENVIRO_Y.$Y_TYPE_O")
    [[ -z $X_WHO ]] && X_WHO="<null>"
    [[ -z $Y_WHO ]] && Y_WHO="<null>"

    updateMsg "
» Subversion blame
· $BRAND_X $ENVIRO_X: $X_WHO
· $BRAND_Y $ENVIRO_Y: $Y_WHO
"
  fi 

done

echo
cat $MSG
[[ -n $TICKET ]] && jira-comment "$TICKET" "$ICON_INFO 
{noformat}$(cat $MSG){noformat}
"
rm -f $MSG $TBL

exit 0

